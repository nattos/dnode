
constexpr float Pi = 3.1415926535897932384626433832795;

auto outPosition = output0;
auto outPathIndex = output1;
auto outCounter = output2;
auto outTriggerPoint = output3;
auto outTriggerDirection = output4;
auto outTriggerNormal = output5;
auto outTriggerSize = output6;
auto outPonkCounter = output7;
auto outPonkPathPoints = output8;
auto outPonkPathIndex = output9;
auto outTriggerTime = output10;
auto outTriPoints = output11;
auto outTriPointUVs = output12;
auto outTriPointsCount = output13;
auto outDistortionCenter = output14;
auto outDistortionDirection = output15;
auto outDistortionStrength = output16;




float2 transformScale = float2(0.5, 0.5);
float2 transformOrigin = float2(0.0, 0.0);



float pGeneratorSeed = prandom.x;
uint pGenerator = ((uint)(pGeneratorSeed * 0xFFFFFFFF)) * 22695477 + 1;
pGenerator = pGenerator * 22695477 + 1;



// constexpr float AspectRatio = 9.0 / 16.0;
// constexpr float SpawnSize = 1.2;
// constexpr float PretriggerAmount = 0.1;
// constexpr float PretriggerDecay = 0.98;
// constexpr float Rate = 0.2;
// constexpr float EnvDecay = 0.3;
// constexpr float DeltaTime = 0.1;
// constexpr float FlashQuadLength = 2.75;
// constexpr float FlashQuadFlare = 0.5;


int nextTriIndex = 0;
float pretriggerTime = SampleBuffer(outTriggerTime, 0);
float rateTime = SampleBuffer(outTriggerTime, 1);
float triggeredTime = SampleBuffer(outTriggerTime, 2);
float flickerTime = SampleBuffer(outTriggerTime, 3);

bool triggered = false;

pretriggerTime = saturate(pretriggerTime * PretriggerDecay + PretriggerAmount * DeltaTime);
rateTime += Rate * DeltaTime;
if (rateTime > 1.0) {
  triggered = true;
  rateTime -= floor(rateTime);
}

triggeredTime = max(0.0, triggeredTime - EnvDecay * DeltaTime);
if (triggered) {
  triggeredTime = 1.0;
  flickerTime = LaserHoldTime * 2;

  float pArcStart = ((float)(pGenerator & 0x7FFFFFFF)) / ((float)0x7FFFFFFF);
  pGenerator = pGenerator * 22695477 + 1;
  float pArcLength = ((float)(pGenerator & 0x7FFFFFFF)) / ((float)0x7FFFFFFF);
  pGenerator = pGenerator * 22695477 + 1;
  float arcStart = pArcStart;
  float arcEnd = arcStart + mix(0.15, 0.35, pArcLength);


  float2 arcStartDir = float2(cos(arcStart * Pi * 2), sin(arcStart * Pi * 2));
  float2 arcEndDir = float2(cos(arcEnd * Pi * 2), sin(arcEnd * Pi * 2));

  float2 arcStartPoint = arcStartDir * SpawnSize;
  float2 arcEndPoint = arcEndDir * SpawnSize;
  WriteBuffer(outTriggerPoint, 0, arcStartPoint);
  WriteBuffer(outTriggerPoint, 1, arcEndPoint);
}




float laserFlickerEnvContrib = mix(1.0, 1 - sin(saturate(triggeredTime) * Pi), LaserFlickerEnv);
float flickerDutyFraction = 1.0 - laserFlickerEnvContrib * 0.5;
flickerTime -= LaserFlickerRate * laserFlickerEnvContrib;
if (flickerTime < 0) {
  flickerTime -= floor(flickerTime);
}
bool envFlickerOn = flickerTime > flickerDutyFraction && (laserFlickerEnvContrib > LaserFlickerThreshold || flickerTime > 1.0);
bool isLaser = triggered || envFlickerOn;






WriteBuffer(outTriggerTime, 0, pretriggerTime);
WriteBuffer(outTriggerTime, 1, rateTime);
WriteBuffer(outTriggerTime, 2, triggeredTime);
WriteBuffer(outTriggerTime, 3, flickerTime);






if (triggered || triggeredTime > 0) {
  float2 arcPointStart = SampleBuffer(outTriggerPoint, 0);
  float2 arcPointEnd = SampleBuffer(outTriggerPoint, 1);

  if (isLaser) {
    {
      int writeIndex = atomic_fetch_add_explicit(&(outPonkCounter[0]), 1, memory_order_relaxed);
      WriteBuffer(outPonkPathPoints, writeIndex, float2(arcPointStart * transformScale + transformOrigin));
      WriteBuffer(outPonkPathIndex, writeIndex, 0);
    }
    {
      int writeIndex = atomic_fetch_add_explicit(&(outPonkCounter[0]), 1, memory_order_relaxed);
      WriteBuffer(outPonkPathPoints, writeIndex, float2(arcPointEnd * transformScale + transformOrigin));
      WriteBuffer(outPonkPathIndex, writeIndex, 0);
    }
  }

  float2 lineDelta = arcPointEnd - arcPointStart;
  float lineLength = magnitude_op(lineDelta);
  float2 lineDir = lineDelta / lineLength;
  float2 lineNormal = -float2(lineDir.y, -lineDir.x);

  float flareLength = FlashQuadFlare * FlashQuadLength;
  float2 flashQuad00 = arcPointStart;
  float2 flashQuad10 = arcPointEnd;
  float2 flashQuad01 = flashQuad00 + lineNormal * FlashQuadLength - lineDir * flareLength;
  float2 flashQuad11 = flashQuad10 + lineNormal * FlashQuadLength + lineDir * flareLength;
  float flareInset = flareLength / (1 + flareLength * 2);
  float2 flashQuadA1 = flashQuad00 + lineNormal * FlashQuadLength;
  float2 flashQuadA1Uv = float2(flareInset, 1);
  float2 flashQuadB1 = flashQuad10 + lineNormal * FlashQuadLength;
  float2 flashQuadB1Uv = float2(1 - flareInset, 1);
  float2 flashQuad51 = (flashQuad01 + flashQuad11) * 0.5;

  {
    int writeIndex = nextTriIndex++;
    WriteBuffer(outTriPoints, writeIndex * 3 + 0, float3(flashQuad00 * transformScale + transformOrigin, triggeredTime));
    WriteBuffer(outTriPoints, writeIndex * 3 + 1, float3(flashQuad01 * transformScale + transformOrigin, 0));
    WriteBuffer(outTriPoints, writeIndex * 3 + 2, float3(flashQuadA1 * transformScale + transformOrigin, 0));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 0, float2(0, 0));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 1, float2(0, 1));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 2, flashQuadA1Uv);
  }
  {
    int writeIndex = nextTriIndex++;
    WriteBuffer(outTriPoints, writeIndex * 3 + 0, float3(flashQuad00 * transformScale + transformOrigin, triggeredTime));
    WriteBuffer(outTriPoints, writeIndex * 3 + 1, float3(flashQuadA1 * transformScale + transformOrigin, 0));
    WriteBuffer(outTriPoints, writeIndex * 3 + 2, float3(flashQuad51 * transformScale + transformOrigin, 0));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 0, float2(0, 0));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 1, flashQuadA1Uv);
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 2, float2(0.5, 1));
  }
  {
    int writeIndex = nextTriIndex++;
    WriteBuffer(outTriPoints, writeIndex * 3 + 0, float3(flashQuad00 * transformScale + transformOrigin, triggeredTime));
    WriteBuffer(outTriPoints, writeIndex * 3 + 1, float3(flashQuad51 * transformScale + transformOrigin, 0));
    WriteBuffer(outTriPoints, writeIndex * 3 + 2, float3(flashQuad10 * transformScale + transformOrigin, triggeredTime));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 0, float2(0, 0));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 1, float2(0.5, 1));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 2, float2(1, 0));
  }
  {
    int writeIndex = nextTriIndex++;
    WriteBuffer(outTriPoints, writeIndex * 3 + 0, float3(flashQuad10 * transformScale + transformOrigin, triggeredTime));
    WriteBuffer(outTriPoints, writeIndex * 3 + 1, float3(flashQuad51 * transformScale + transformOrigin, 0));
    WriteBuffer(outTriPoints, writeIndex * 3 + 2, float3(flashQuadB1 * transformScale + transformOrigin, 0));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 0, float2(1, 0));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 1, float2(0.5, 1));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 2, flashQuadB1Uv);
  }
  {
    int writeIndex = nextTriIndex++;
    WriteBuffer(outTriPoints, writeIndex * 3 + 0, float3(flashQuad10 * transformScale + transformOrigin, triggeredTime));
    WriteBuffer(outTriPoints, writeIndex * 3 + 1, float3(flashQuadB1 * transformScale + transformOrigin, 0));
    WriteBuffer(outTriPoints, writeIndex * 3 + 2, float3(flashQuad11 * transformScale + transformOrigin, 0));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 0, float2(1, 0));
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 1, flashQuadB1Uv);
    WriteBuffer(outTriPointUVs, writeIndex * 3 + 2, float2(1, 1));
  }
  WriteBuffer(outDistortionCenter, 0, (flashQuad00 + flashQuad10) * 0.5);
  WriteBuffer(outDistortionDirection, 0, lineNormal);
  WriteBuffer(outDistortionStrength, 0, triggeredTime);
}

WriteBuffer(outTriPointsCount, 0, nextTriIndex);


placeholder = float3(pretriggerTime, rateTime, triggeredTime);




// {
//   int writeIndex = atomic_fetch_add_explicit(&(outCounter[0]), 1, memory_order_relaxed);
//   WriteBuffer(outPosition, writeIndex, float3(0, 0, 1));
//   WriteBuffer(outPathIndex, writeIndex, 0);
// }
// {
//   int writeIndex = atomic_fetch_add_explicit(&(outCounter[0]), 1, memory_order_relaxed);
//   WriteBuffer(outPosition, writeIndex, float3(0, 1, 1));
//   WriteBuffer(outPathIndex, writeIndex, 0);
// }
// {
//   int writeIndex = atomic_fetch_add_explicit(&(outCounter[0]), 1, memory_order_relaxed);
//   WriteBuffer(outPosition, writeIndex, float3(1, 0, 1));
//   WriteBuffer(outPathIndex, writeIndex, 0);
// }
// {
//   int writeIndex = atomic_fetch_add_explicit(&(outCounter[0]), 1, memory_order_relaxed);
//   WriteBuffer(outPosition, writeIndex, float3(1, 1, 1));
//   WriteBuffer(outPathIndex, writeIndex, 0);
// }








